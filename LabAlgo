import numpy as np
import matplotlib.pyplot as plt

def cost_function(x):
    return x[0]**2 + x[1]**2 + 5

def performance_function(x):
    return 10 - (x[0] - 2)**2 - (x[1] - 3)**2

n_particles = 30
n_iterations = 100
dim = 2
w = 0.5
c1 = 1.5
c2 = 1.5
v_max = 1

positions = np.random.uniform(-10, 10, (n_particles, dim))
velocities = np.random.uniform(-v_max, v_max, (n_particles, dim))
personal_best_positions = positions.copy()
personal_best_scores = np.array([cost_function(p) for p in positions])
global_best_position = personal_best_positions[np.argmin(personal_best_scores)]
global_best_score = np.min(personal_best_scores)

for iteration in range(n_iterations):
    for i in range(n_particles):

        cost = cost_function(positions[i])
        performance = performance_function(positions[i])


        combined_score = performance - cost


        if combined_score < personal_best_scores[i]:
            personal_best_positions[i] = positions[i].copy()
            personal_best_scores[i] = combined_score


    global_best_position = personal_best_positions[np.argmin(personal_best_scores)]
    global_best_score = np.min(personal_best_scores)

    for i in range(n_particles):
        r1, r2 = np.random.rand(2)
        velocities[i] = w * velocities[i] + c1 * r1 * (personal_best_positions[i] - positions[i]) + c2 * r2 * (global_best_position - positions[i])
        velocities[i] = np.clip(velocities[i], -v_max, v_max)  # Ensure velocity is within bounds
        positions[i] = positions[i] + velocities[i]

    print(f"Iteration {iteration+1}: Global Best Score = {global_best_score}")
cost_values = np.array([cost_function(p) for p in personal_best_positions])
performance_values = np.array([performance_function(p) for p in personal_best_positions])

plt.scatter(cost_values, performance_values)
plt.xlabel("Cost (minimized)")
plt.ylabel("Performance (maximized)")
plt.title("Pareto Front")
plt.show()

# Final output: Global Best Solution
print("Global Best Position:", global_best_position)
print("Global Best Score:", global_best_score)
